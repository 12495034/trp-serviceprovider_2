rules_version = '2';

service cloud.firestore {
   match /databases/{database}/documents {
      //general rules for unmatched document
      match /{document=**}{
        allow read, write: if false
      }
      match /Mail/{mailId}{
      // users or admins should not have access to this collection
      //these documents are created by a cloud function
      allow read,write: if false
      }
      
      match /Supporting/Data {
      // Allow any signed in user to read question documents only
      allow read: if request.auth !=null && request.auth.token.accountStatus == "Active";
      allow write:if request.auth.token.role == "Admin" && request.auth.token.accountStatus == "Active";
      }
      
      match /Supporting/pronouns {
      // Allow any signed in user to read question documents only
      allow read: if true
      allow write:if request.auth.token.role == "Admin" && request.auth.token.accountStatus == "Active";
      }

       match /Supporting/role {
      // Allow any signed in user to read role document
      allow read: if true
      allow write:if request.auth.token.role == "Admin" && request.auth.token.accountStatus == "Active";
      }
      
      match /Supporting/userStatus {
      // Allow any signed in user to read userStatus document
      allow read: if true
      allow write:if request.auth.token.role == "Admin" && request.auth.token.accountStatus == "Active";
      }
      
   		match /Questions/{questionId}{
        // Allow any signed in user to read question documents only
      	allow read: if request.auth !=null && request.auth.token.accountStatus == "Active";
        //Allow Admins full control over question documents
        allow create,update,delete: if request.auth.token.role == "Admin" && request.auth !=null && request.auth.token.accountStatus == "Active";
      }

   		match /Location/{locationId}{
      	// Allow any signed in user to read Location documents only
      	allow read: if request.auth !=null && request.auth.token.accountStatus == "Active";
        //Allow Admins full control over Location documents
        allow create,update,delete: if request.auth.token == "Admin" && request.auth !=null && request.auth.token.accountStatus == "Active";
        
        match /Centers/{centerId} {
        // Allow any signed in user to read Center documents only
        allow read: if request.auth !=null && request.auth.token.accountStatus == "Active";
        //Allow Admins full control over Center documents
        allow create,update,delete: if request.auth.token.role == "Admin" && request.auth !=null && request.auth.token.accountStatus == "Active";
        }
      }
      match /Clinics/{clinicId}{
        //allow admin to create new clinics with specific fields required
      	allow create: if request.resource.data.keys().hasAll(['capacity', 'center', 'clinicStatus', 'createdBy','date','location','slots','startTime'])&& request.auth.token.role == "Admin" && request.auth !=null && request.auth.token.accountStatus == "Active";
        //allow admin or support to update specific clinic information
        allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['addDetails','center','createdBy','date','location','startTime','timeStamp'])) && (request.auth.token.role == "Admin" || request.auth.token.role == "Support") && request.auth !=null && request.auth.token.accountStatus == "Active";

      	// Allow any signed in user with an active account to read the document and  update the slots field only
        allow read: if request.auth !=null && request.auth.token.accountStatus == "Active";
        allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['addDetails', 'capacity','center','clinicStatus','createdBy','date','location','startTime','timeStamp'])) && request.auth.token.role == "Service-User" && request.auth !=null && request.auth.token.accountStatus == "Active";
        

        match /Appointments/{userId} {
          // Allow data owner create, read, update and delete control over their own data
          allow create: if (request.auth.token.role == "Service-User" || request.auth.token.role == "Admin") && request.auth !=null && request.auth.token.accountStatus == "Active";
          allow read,delete: if (request.auth.uid == userId || request.auth.token.role == "Admin"||request.auth.token.role == "Support") && request.auth !=null && request.auth.token.accountStatus == "Active";
          allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['called', 'calledBy','slot','status','time','wasSeen'])) && request.auth.token.role == "Service-User" && request.auth.uid == userId && request.auth !=null && request.auth.token.accountStatus == "Active";
          allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['slot'])) && (request.auth.token.role == "Admin" || request.auth.token.role == "Support")  && request.auth !=null && request.auth.token.accountStatus == "Active";
        }
      }
      
      match /Users/{userId}{
        //allow the creation of a new user document provided specific fields are included
        allow create: if request.resource.data.keys().hasAll(['email', 'FirstName', 'LastName', 'PhoneNumber','ProNouns','dob','isAgreedTC','emailOptIn']);
        //allow users with the same id as the document or admin role to read and update
        allow read,delete: if (request.auth.uid == userId || request.auth.token.role == "Admin" ) && request.auth !=null && request.auth.token.accountStatus == "Active"; 
        //allow users with the same id as the document or admin role to update any field except those listed
        allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email'])) && (request.auth.token.role == "Service-User" || request.auth.token.role == "Admin") && request.auth !=null && request.auth.token.accountStatus == "Active";  
      }
      
      match /Users/{userId}/Appointments/{clinicId} {
         // Allow data owner CRUD control over their own data
          allow create: if (request.auth.token.role == "Service-User" || request.auth.token.role == "Admin") && request.auth !=null && request.auth.token.accountStatus == "Active";
          allow read,delete: if (request.auth.uid == userId || request.auth.token.role == "Admin") && request.auth !=null && request.auth.token.accountStatus == "Active";
          allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['called', 'calledBy','center','date','location','slot','status','time','wasSeen'])) && request.auth.token.role == "Service-User" && request.auth.uid == userId && request.auth !=null && request.auth.token.accountStatus == "Active";
          allow update: if (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['center','date','location','slot','time'])) && request.auth.token.role == "Admin" && request.auth !=null && request.auth.token.accountStatus == "Active";
        }
        
        match /Users/{userId}/Restricted/Details {
          //Allow Users read only access to their restricted information
          allow read: if request.auth != null && (request.auth.uid == userId || request.auth.token.role =="Admin") && request.auth.token.accountStatus == "Active"; 
          //Allow Admin Update control over user restricted information only
          allow update: if request.auth !=null && request.auth.token.role == "Admin" && request.auth.token.accountStatus == "Active"
        }
  }
}
